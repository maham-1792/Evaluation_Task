# -*- coding: utf-8 -*-
"""pandas_evaluation_task (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JiyAMYJgeyGG0XX_Qv7_CdOLhyucG-yj

# Perform the following analysis on the provided file "demo.csv".


## 1. Which month saw the highest joining of the employees

   function name: max_joinings_month()
   
   inputs: DataFrame

   outputs: str
   
   
## 2. What is the mean salary is the state KS

   function name: mean_ks_salary()
   
   inputs: DataFrame

   outputs: float
   
   
## 3. Which Region has highest mean salary

   function name: max_mean_salary_region()

   inputs: DataFrame

   outputs: str
   
   
## 4. Which region has lowest mean salary

   function name: min_mean_salary_region()

   inputs: DataFrame

   outputs: str
   
   
## 5. Which City has highest mean weight

   function name: max_mean_weight_city()

   inputs: DataFrame

   outputs: str
   
   
## 6. What is the difference between mean salary of Doctors and Professors

   function name: dr_prof_mean_salary_diff()

   inputs: DataFrame

   outputs: float
   
   
## 7. How many female use yahoo

   function name: females_with_yahoo()

   inputs: DataFrame

   outputs: int
   
   
## 8. How many Doctors use gmail

   function name: doctors_with_gmail()

   inputs: DataFrame

   outputs: int
   
   
## 9. What is the password of the youngest male

   function name: youngest_male_password()

   inputs: DataFrame

   outputs: str
"""

import pandas as pd

data= pd.read_csv('/content/demo.csv')
print(data)

"""## 1. Which month saw the highest joining of the employees

   function name: max_joinings_month()
   
   inputs: DataFrame

   outputs: str
"""

def max_joinings_month(data):

    joining = data.groupby("Month of Joining").count().reset_index()

    result = joining.sort_values(by="First Name", ascending=False)

    max_month_number = result["Month of Joining"].iloc[0]

    max_month_name = calendar.month_name[max_month_number]

    return max_month_name


print("Month of Joining:", max_joinings_month(data))

"""## 2. What is the mean salary is the state KS

   function name: mean_ks_salary()
   
   inputs: DataFrame

   outputs: float
"""

def mean_ks_salary(data):
    #
    ks_data = data[data['State'] == 'KS']
    mean_salary_ks = ks_data['Salary'].mean()

    return mean_salary_ks

average_salary_ks = mean_ks_salary(data)
print("Mean Salary in the state KS:", average_salary_ks)

"""## 3. Which Region has highest mean salary

   function name: max_mean_salary_region()

   inputs: DataFrame

   outputs: str
"""

def max_mean_salary_region(data):
    region_mean_salary = data.groupby('Region')['Salary'].mean()

    # Find the region with the highest mean salary
    max_mean_salary_region = region_mean_salary.idxmax()

    return max_mean_salary_region
highest_mean_salary_region = max_mean_salary_region(data)
print("Region with the highest mean salary:", highest_mean_salary_region)

"""## 4. Which region has lowest mean salary

   function name: min_mean_salary_region()

   inputs: DataFrame

   outputs: str
"""

def min_mean_salary_region(data):
    region_mean_salary = data.groupby('Region')['Salary'].mean()

    # Find the region with the lowest mean salary
    min_mean_salary_region = region_mean_salary.idxmin()

    return min_mean_salary_region
lowest_mean_salary_region = min_mean_salary_region(data)
print("Region with the lowest mean salary:", lowest_mean_salary_region)

"""## 5. Which City has highest mean weight

   function name: max_mean_weight_city()

   inputs: DataFrame

   outputs: str
"""

def max_mean_weight_city(data):
    City_mean_weight = data.groupby('City')['Weight in Kgs.'].mean()
    max_mean_weight_city = City_mean_weight.idxmax()

    return max_mean_weight_city
highest_mean_weight_city = max_mean_weight_city(data)
print("City with the highest mean weight:", highest_mean_weight_city)

data.columns

"""## 6. What is the difference between mean salary of Doctors and Professors

   function name: dr_prof_mean_salary_diff()

   inputs: DataFrame

   outputs: float
"""

def dr_prof_mean_salary_diff(data):
    doctors_data = data[data["Name Prefix"].isin(["Dr.", "Drs."])]
    professors_data = data[data["Name Prefix"] == "Prof."]
    mean_doctors = doctors_data["Salary"].mean()
    mean_professors = professors_data["Salary"].mean()
    difference = mean_professors- mean_doctors
    return difference
diff = dr_prof_mean_salary_diff(data)
print("Mean salary:", diff)

"""## 7. How many female use yahoo

   function name: females_with_yahoo()

   inputs: DataFrame

   outputs: int
"""

def females_with_yahoo(data):
    female_yahoo = data[(data["Gender"] == "F") & (data["E Mail"].str.strip().str.contains("yahoo"))]
    return len(female_yahoo)
fe = females_with_yahoo(data)
print("Number of females with Yahoo email addresses:",fe)

"""## 8. How many Doctors use gmail

   function name: doctors_with_gmail()

   inputs: DataFrame

   outputs: int
"""

def doctors_with_gmail(data):
    female_yahoo = data[(data["Gender"] == "M") & (data["E Mail"].str.strip().str.endswith("@gmail.com"))]
    return len(female_yahoo)
ge = doctors_with_gmail(data)
print("Doctors use gmail:", ge)

"""## 9. What is the password of the youngest male

   function name: youngest_male_password()

   inputs: DataFrame

   outputs: str
"""

def youngest_male_password(data):
    males_data = data[data["Gender"] == "M"]
    youngest_male_idx = males_data["Age in Yrs."].idxmin()
    password_youngest_male = data.loc[youngest_male_idx, "Password"]
    return password_youngest_male
pas = youngest_male_password(data)
print("Password of youngest male:", pas)